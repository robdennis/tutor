// Generated by CoffeeScript 1.7.1
(function() {
  var cheerio, extract, gatherer, supertypes, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    __slice = [].slice;

  cheerio = require('cheerio');

  _ = require('underscore');

  gatherer = require('../gatherer');

  supertypes = require('../supertypes');

  module.exports = function(details, callback) {
    var _ref;
    if ('which' in details && ((_ref = details.which) !== 'a' && _ref !== 'b')) {
      callback(new Error('invalid which property (valid values are "a" and "b")'));
    }
    gatherer.request(gatherer.card.url('Details.aspx', details), function(err, res, body) {
      if (err) {
        return callback(err);
      } else {
        return callback(null, extract(body, details));
      }
    });
  };

  extract = function(html, details) {
    var $, card, encodedName, get_versions, rating, set, t, t1, verbose, votes, _i, _ref;
    verbose = 'id' in details;
    $ = cheerio.load(html);
    t = function(el) {
      return gatherer._get_text($(el));
    };
    t1 = function(el) {
      return gatherer._get_text($(el).next());
    };
    card = {
      converted_mana_cost: 0,
      supertypes: [],
      types: [],
      subtypes: [],
      rulings: _.map($('.discussion').find('tr.post'), function(el) {
        var d, date, m, pad, ruling, y, _ref, _ref1;
        _ref = $(el).children(), date = _ref[0], ruling = _ref[1];
        _ref1 = $(date).text().trim().split('/'), m = _ref1[0], d = _ref1[1], y = _ref1[2];
        pad = function(s) {
          return ("0" + s).substr(-2);
        };
        return ["" + y + "-" + (pad(m)) + "-" + (pad(d)), $(ruling).text().trim().replace(/[ ]{2,}/g, ' ')];
      })
    };
    set = gatherer._set.bind(null, card);
    get_versions = _.compose(gatherer._get_versions, function(el) {
      return $(el).find('.label').filter(function(idx, el) {
        return $(el).text().trim() === 'Expansion:';
      }).next().find('img');
    });
    $((function() {
      var left, right, _ref;
      _ref = $('.cardComponentContainer'), left = _ref[0], right = _ref[1];
      if (details.which === 'b') {
        return left;
      } else if (verbose && (details.id in get_versions(right) && !(details.id in get_versions(left)))) {
        return left;
      } else if (!verbose && $(right).find('.label').filter(function(idx, el) {
        return $(el).text().trim() === 'Card Name:';
      }).next().text().trim().toLowerCase() === details.name.toLowerCase()) {
        return left;
      } else {
        return right;
      }
    })()).remove();
    $('.label').each(function() {
      var $el, $flavor, match, pattern, power, subtypes, text, toughness, type, types, _i, _j, _k, _len, _ref, _ref1, _ref2;
      $el = $(this);
      switch ($el.text().trim()) {
        case 'Card Name:':
          return set('name', $el.next().text().trim());
        case 'Mana Cost:':
          return set('mana_cost', gatherer._get_text($el.next()));
        case 'Converted Mana Cost:':
          return set('converted_mana_cost', +t1($el));
        case 'Types:':
          _ref = /^(.+?)(?:\s+\u2014\s+(.+))?$/.exec(t1($el)), _i = _ref.length - 2, types = _ref[_i++], subtypes = _ref[_i++];
          _ref1 = types.split(/\s+/);
          for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
            type = _ref1[_j];
            card[__indexOf.call(supertypes, type) >= 0 ? 'supertypes' : 'types'].push(type);
          }
          return set('subtypes', subtypes != null ? subtypes.split(/\s+/) : void 0);
        case 'Card Text:':
          return set('text', gatherer._get_rules_text($el.next(), t));
        case 'Flavor Text:':
          if (!verbose) {
            break;
          }
          $flavor = $el.next();
          $el = $flavor.children().last();
          match = /^(\u2014|\u2015\u2015|\uFF5E)\s*(.+)$/.exec($el.text().trim());
          if (match != null) {
            set('flavor_text_attribution', match[2]);
            $el.remove();
          }
          pattern = /^["\u00AB\u201E\u300C]\s*(.+?)\s*["\u00BB\u300D]([.]?)$/;
          text = _.map($flavor.children(), t).join('\n');
          if (match && (match = pattern.exec(text))) {
            text = match[1] + match[2];
          }
          return set('flavor_text', text);
        case 'Color Indicator:':
          return set('color_indicator', t1($el));
        case 'Watermark:':
          return set('watermark', t1($el));
        case 'P/T:':
          _ref2 = /^(.+?)\s+\/\s+(.+)$/.exec(t1($el)), _k = _ref2.length - 2, power = _ref2[_k++], toughness = _ref2[_k++];
          set('power', gatherer._to_stat(power));
          return set('toughness', gatherer._to_stat(toughness));
        case 'Loyalty:':
          return set('loyalty', +t1($el));
        case 'Hand/Life:':
          text = t1($el);
          set('hand_modifier', +text.match(/Hand Modifier: ([+-]\d+)/)[1]);
          return set('life_modifier', +text.match(/Life Modifier: ([+-]\d+)/)[1]);
        case 'Expansion:':
          if (verbose) {
            return set('expansion', $el.next().find('a:last-child').text().trim());
          }
          break;
        case 'Rarity:':
          if (verbose) {
            return set('rarity', t1($el));
          }
          break;
        case 'Card Number:':
          if (verbose) {
            return set('number', gatherer._to_stat(t1($el)));
          }
          break;
        case 'Artist:':
          if (verbose) {
            return set('artist', t1($el));
          }
          break;
        case 'All Sets:':
          return set('versions', gatherer._get_versions($el.next().find('img')));
      }
    });
    _ref = /^CommunityRating:(\d(?:[.]\d+)?)\/5[(](\d+)votes?[)]$/.exec($('.textRating').text().replace(/\s+/g, '')), _i = _ref.length - 2, rating = _ref[_i++], votes = _ref[_i++];
    set('community_rating', {
      rating: +rating,
      votes: +votes
    });
    if (verbose) {
      set('image_url', "" + gatherer.origin + "/Handlers/Image.ashx?type=card&multiverseid=" + details.id);
      set('gatherer_url', "" + gatherer.origin + "/Pages/Card/Details.aspx?multiverseid=" + details.id);
    } else {
      encodedName = encodeURIComponent(details.name).replace(/'/g, '%27');
      set('image_url', "" + gatherer.origin + "/Handlers/Image.ashx?type=card&name=" + encodedName);
      set('gatherer_url', "" + gatherer.origin + "/Pages/Card/Details.aspx?name=" + encodedName);
    }
    return card;
  };

  module.exports.url = function() {
    var id, k, name, o, page, params, path, query, rest, v, _i, _len;
    path = arguments[0], rest = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
    params = {};
    for (_i = 0, _len = rest.length; _i < _len; _i++) {
      o = rest[_i];
      for (k in o) {
        v = o[k];
        params[k] = v;
      }
    }
    id = params.id, name = params.name, page = params.page;
    query = {};
    if ((id != null) && (name != null)) {
      query.multiverseid = id;
      query.part = name;
    } else if (id != null) {
      query.multiverseid = id;
    } else {
      query.name = name;
    }
    if (page > 1) {
      query.page = page - 1;
    }
    return gatherer.url("/Pages/Card/" + path, query);
  };

}).call(this);

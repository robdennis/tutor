// Generated by CoffeeScript 1.7.1
(function() {
  var Q, cheerio, converted_mana_costs, extract, gatherer, rarities, supertypes, to_converted_mana_cost, url, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  url = require('url');

  cheerio = require('cheerio');

  Q = require('q');

  _ = require('underscore');

  gatherer = require('../gatherer');

  rarities = require('../rarities');

  supertypes = require('../supertypes');

  module.exports = function(name, callback) {
    var common_params;
    common_params = {
      advanced: 'true',
      set: "[\"" + name + "\"]",
      special: 'true'
    };
    gatherer.request(gatherer.url('/Pages/Search/Default.aspx', _.extend({
      output: 'checklist'
    }, common_params)), function(err, res) {
      var $, cards$;
      if (err != null) {
        callback(err);
        return;
      }
      $ = cheerio.load(res.body);
      cards$ = _.map($('.cardItem'), function(el) {
        var get;
        get = function(selector) {
          return $(el).find(selector).text();
        };
        return {
          color_indicator: get('.color'),
          name: get('.name'),
          rarity: rarities[get('.rarity')]
        };
      });
      return Q.all(_.map(_.range(Math.ceil(cards$.length / 25)), function(page) {
        var deferred;
        deferred = Q.defer();
        gatherer.request(gatherer.url('/Pages/Search/Default.aspx', _.extend({
          output: 'standard',
          page: "" + page
        }, common_params)), deferred.makeNodeResolver());
        return deferred.promise;
      })).then(function(xs) {
        var c$, card, card$, card_name, color, idx, versions, _i, _j, _len, _len1, _ref;
        for (_i = 0, _len = xs.length; _i < _len; _i++) {
          res = xs[_i][0];
          _ref = extract(res.body, name);
          for (card_name in _ref) {
            versions = _ref[card_name];
            for (idx = _j = 0, _len1 = versions.length; _j < _len1; idx = ++_j) {
              card = versions[idx];
              card$ = ((function() {
                var _k, _len2, _results;
                _results = [];
                for (_k = 0, _len2 = cards$.length; _k < _len2; _k++) {
                  c$ = cards$[_k];
                  if (c$.name === card_name) {
                    _results.push(c$);
                  }
                }
                return _results;
              })())[idx];
              _.extend(card$, card);
              card$.expansion = name;
              color = card$.color_indicator;
              if (!(color === 'White' && !/W/.test(card$.mana_cost) || color === 'Blue' && !/U/.test(card$.mana_cost) || color === 'Black' && !/B/.test(card$.mana_cost) || color === 'Red' && !/R/.test(card$.mana_cost) || color === 'Green' && !/G/.test(card$.mana_cost))) {
                delete card$.color_indicator;
              }
            }
          }
        }
        return callback(null, cards$);
      })["catch"](callback);
    });
  };

  extract = function(html, name) {
    var $, cards_mapping$, t;
    $ = cheerio.load(html);
    t = function(el) {
      return gatherer._get_text($(el));
    };
    cards_mapping$ = {};
    _.chain($('.cardItem').find('.setVersions').find('img')).filter(function(el) {
      return $(el).attr('alt').indexOf("" + name + " (") === 0;
    }).each(function(el) {
      var $card_title, $el, arr$, card$, mana_cost, match, param, subtypes, type, types, _i, _j, _len, _name, _ref, _ref1;
      $el = $(el).closest('.cardItem');
      $card_title = $el.find('.cardTitle');
      param = /multiverseid=\d+/.exec($(el).parent().attr('href'))[0];
      card$ = {
        name: t($card_title),
        converted_mana_cost: 0,
        supertypes: [],
        types: [],
        subtypes: [],
        gatherer_url: "" + gatherer.origin + "/Pages/Card/Details.aspx?" + param,
        image_url: "" + gatherer.origin + "/Handlers/Image.ashx?" + param + "&type=card"
      };
      mana_cost = t($el.find('.manaCost'));
      if (mana_cost !== '') {
        card$.mana_cost = mana_cost;
      }
      card$.converted_mana_cost = to_converted_mana_cost(mana_cost);
      _ref = /^([^\u2014]+?)(?:\s+\u2014\s+(.+))?$/m.exec(t($el.find('.typeLine'))), _i = _ref.length - 2, types = _ref[_i++], subtypes = _ref[_i++];
      _ref1 = types.split(/\s+/);
      for (_j = 0, _len = _ref1.length; _j < _len; _j++) {
        type = _ref1[_j];
        card$[__indexOf.call(supertypes, type) >= 0 ? 'supertypes' : 'types'].push(type);
      }
      if (subtypes) {
        card$.subtypes = subtypes.split(/\s+/);
      }
      card$.text = _.map($el.find('.rulesText').find('p'), t).join('\n\n');
      match = /(Vanguard\s*)?[(]([^\/]*(?:[{][^}]+[}])?)\/([^\/]*(?:[{][^}]+[}])?)[)]$/.exec($el.find('.typeLine').text());
      if (match != null) {
        _.extend(card$, _.object(match[1] != null ? ['hand_modifier', 'life_modifier'] : ['power', 'toughness'], _.map(match.slice(2, 4), gatherer._to_stat)));
      }
      match = /[(](\d+)[)]$/.exec($el.find('.typeLine').text());
      if (match != null) {
        card$.loyalty = +match[1];
      }
      card$.versions = _.object(_.map($el.find('.setVersions').find('img'), function(el) {
        return _.rest(/^(.*) [(](.*?)[)]$/.exec($(el).attr('alt')));
      }));
      arr$ = cards_mapping$[_name = card$.name] != null ? cards_mapping$[_name] : cards_mapping$[_name] = [];
      arr$.push(card$);
      return arr$.sort(function(a, b) {
        var aa, bb;
        aa = +url.parse(a.gatherer_url, true).query.multiverseid;
        bb = +url.parse(b.gatherer_url, true).query.multiverseid;
        if (aa < bb) {
          return -1;
        } else if (aa > bb) {
          return 1;
        } else {
          return 0;
        }
      });
    });
    return cards_mapping$;
  };

  converted_mana_costs = {
    '{X}': 0,
    '{4}': 4,
    '{10}': 10,
    '{16}': 16,
    '{2/W}': 2,
    '{Y}': 0,
    '{5}': 5,
    '{11}': 11,
    '{17}': 17,
    '{2/U}': 2,
    '{Z}': 0,
    '{6}': 6,
    '{12}': 12,
    '{18}': 18,
    '{2/B}': 2,
    '{0}': 0,
    '{7}': 7,
    '{13}': 13,
    '{19}': 19,
    '{2/R}': 2,
    '{2}': 2,
    '{8}': 8,
    '{14}': 14,
    '{20}': 20,
    '{2/G}': 2,
    '{3}': 3,
    '{9}': 9,
    '{15}': 15
  };

  to_converted_mana_cost = function(mana_cost) {
    var cmc, symbol, _i, _len, _ref, _ref1;
    cmc = 0;
    _ref = mana_cost.split(/(?=[{])/);
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      symbol = _ref[_i];
      cmc += (_ref1 = converted_mana_costs[symbol]) != null ? _ref1 : 1;
    }
    return cmc;
  };

}).call(this);
